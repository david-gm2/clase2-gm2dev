// ** Loops
const prompt = require("prompt-sync")();
function verifyNumber(...valores) {
  return valores.every((v) => typeof v === "number" && !Number.isNaN(v));
}
// TODO: 1. Usa el bucle for para mostrar n√∫meros pares del 2 al 30.

function exercise1() {
  for (let i = 2; i <= 30; i++) {
    console.log(i);
  }
}

// exercise1();

// TODO: 2. Escribe un bucle que solicite un n√∫mero mayor que 250. Si el usuario ingresa otro n√∫mero debes pedirle que ingrese un valor nuevo El bucle debe pedir un n√∫mero hasta que el usuario ingrese un n√∫mero mayor que 250 o lo cancele Aqu√≠ podemos asumir que el usuario solo ingresar√° n√∫meros.

function exercise2() {
  let numIngresado = -1;

  while (true) {
    numIngresado = parseInt(
      prompt('Ingrese un n√∫mero mayor a 250 (escriba "0" si desea salir): ')
    );

    if (!verifyNumber(numIngresado)) {
      console.log("Ingrese un n√∫mero v√°lido :)");
      continue;
    }

    if (numIngresado === 0) {
      console.log("üëã Saliste del programa.");
      break;
    }

    if (numIngresado <= 250) {
      console.log("‚ùå El n√∫mero debe ser mayor a 250");
      continue;
    }

    console.log(
      `‚úÖ N√∫mero validado correctamente\nN√∫mero ingresado: ${numIngresado}`
    );
    break;
  }
}

// exercise2();

// TODO: 3. Un n√∫mero entero mayor que 1 es llamado primo si no puede ser dividido sin un resto por ning√∫n n√∫mero excepto 1 y √©l mismo. En otras palabras, n > 1 es un primo si no puede ser dividido exactamente por ning√∫n n√∫mero excepto 1 y n. Por ejemplo, 5 es un primo, porque no puede ser dividido exactamente por 2, 3 y 4. Escribe el c√≥digo que muestre n√∫meros primos en el intervalo de 2 a n. Ejemplo: Para n = 10 el resultado ser√° 2, 3, 5, 7.

function exercise3() {
  let rango = -1;

  while (true) {
    rango = parseInt(
      prompt(
        "Ingrese el rango de numeros para ver cuales son primos (escriba '0' si desea salir): "
      )
    );
    if (!verifyNumber(rango)) {
      console.log("Ingrese un numero valido :)");
      continue;
    }
    if (rango === 0) {
      console.log("üëã Saliste del programa.");
      break;
    }

    if (rango <= 2) {
      console.log("El n√∫mero debe ser mayor a 2.");
      continue;
    }

    let multiplos = [];

    for (let i = 2; i <= rango; i++) {
      let primo = true;
      for (let j = 2; j < i; j++) {
        if (rango % j === 0) {
          primo = true;
        }
        if (primo) {
          multiplos.push(j);
        }
      }
    }

    console.log(multiplos);
  }
}

// exercise3();

// TODO: 4. Ingrese un n√∫mero y mostrar su potencia n^2, repetir este proceso hasta que se ingrese un n√∫mero negativo

function exercise4() {
  let numPotencia = 0;

  while (true) {
    numPotencia = parseInt(
      prompt(
        "Ingrese un numero para saber su n^2 (escriba un numero negatvo (ej.: -2) para salir del programa): "
      )
    );
    if (!verifyNumber(numPotencia)) {
      console.log("Ingrese un numero valido :)");
      continue;
    }
    if (numPotencia < 0) {
      console.log("üëã Saliste del programa.");
      break;
    }

    console.log(`La potencia n^2 de ${numPotencia} = ${numPotencia ** 2}`);
  }
}

// exercise4();

// TODO: 5. Pedir un n√∫mero hasta que se ingrese el n√∫mero 0 o negativo, luego mostrar la suma de todos los n√∫meros ingresados

function exercise5() {
  let numSuma = [];

  while (true) {
    num = parseInt(
      prompt(
        "Ingrese todos los numeros a suamr (escriba un numero negatvo (ej.: '-2') o '0' para salir del programa): "
      )
    );
    if (!verifyNumber(num)) {
      console.log("Ingrese un numero valido :)");
      continue;
    }
    if (num <= 0) {
      console.log("üëã Saliste del programa.");
      break;
    }

    numSuma.push(num);
    console.log(`El numero ${num} a sido ingresado correctamente`);
  }

  if (numSuma.length != 0) {
    let sumaDeTodosLosNumeros = numSuma.reduce((acum, curr) => acum + curr, 0);
    console.log(`La sumatoria fianl es: ${sumaDeTodosLosNumeros}`);
  }
}

// exercise5();

// TODO: 6. Crea un objeto con algunas propiedades y utiliza un bucle for...in para imprimir cada propiedad y su valor en la consola.

function exercise6() {
  let usuario = {
    nombre: "David",
    edad: 19,
    nacionalidad: "Colombiana",
  };

  for (var i in usuario) {
    if (usuario.hasOwnProperty(i)) {
      console.log(`${i}: ${usuario[i]}`);
    }
  }
}

// exercise6();

// TODO: 7. Utiliza un bucle do...while para pedir al usuario que ingrese un n√∫mero positivo. Contin√∫a pidiendo hasta que ingrese un n√∫mero positivo.

function exercise7() {
  let number = 0;
  do {
    number = parseInt(prompt("Ingrese un numero positivo: "));
    if (!verifyNumber(number)) {
      console.log("Ingrese un numero valido :)");
      continue;
    }
    if (number < 0) {
      console.log("El n√∫mero debe ser positivo.");
      continue;
    }
  } while (number < 0);
}

// exercise7();

// TODO: 8. Crea un array de nombres. Utiliza un bucle for-of para imprimir cada nombre en la consola.

function exercise8() {
  let nombres = ["juan", "gabrel", "ivan", "david"];

  for (let element of nombres) {
    console.log(element);
  }
}

// exercise8();

// TODO: 9. Crea un array de n√∫meros. Utiliza un bucle for-of para imprimir en la consola los n√∫meros hasta encontrar el n√∫mero 5, luego det√©n el bucle

function exercise9() {
  let numeros = [1, 2, 3, 4, 5, 6, 7];

  for (const element of numeros) {
    if (element === 5) break;
    console.log(element);
  }
}

// exercise9();

// TODO: 10. Utiliza un bucle for-of para imprimir en la consola cada elemento del array y su posici√≥n (√≠ndice)

function exercise10() {
  let numeros = ["frutilla", "color", "coche", "abogado"];

  // El metodo .entries() itera sobre el array devolviendo un array [index, element]
  for (const [index, element] of numeros.entries()) {
    console.log(`Element: ${element}, Position: ${index}`);
  }
}

// exercise10();

// TODO: 11. Crea un programa que pida ingresar un n√∫mero, y muestre su factorial. Este se calcula multiplicando el mismo n√∫mero y todos los n√∫meros que le anteceden hasta el 1. Por ejemplo: 4 ‚áí 4 * 3 * 2 * 1 = 2.

function exercise11() {
  while (true) {
    let numFactorial = parseInt(
      prompt(
        'Ingrese  un numero para mostrar su factorial (escriba "0" para salir del programa): '
      )
    );

    if (!verifyNumber(numFactorial)) {
      console.log("‚ö†Ô∏è Ingrese un numero valido :)");
      continue;
    }
    if (numFactorial === 0) {
      console.log("üëã Saliste del programa.");
      break;
    }

    if (numFactorial < 0) {
      console.log("‚ùå El n√∫mero debe ser positivo");
      continue;
    }

    let resultadoFactorial = 1;

    for (let i = numFactorial; i >= 1; i--) {
      resultadoFactorial *= i;
    }

    console.log(`El factorial de ${numFactorial} es ${resultadoFactorial}`);
  }
}

// exercise11();

// TODO: 12. Crear un programa que pida ingresar usuario y contrase√±a. El programa debe permitir hasta 3 intentos, cuando el usuario y/o la contrase√±a son incorrectos. Si se ingresa correctamente ambos antes de 3 intentos err√≥neos, debe mostrar un mensaje de bienvenida. Si se ingresan 3 intentos err√≥neos, debe mostrar un mensaje de error y terminar el programa. El usuario y la contrase√±a ya deben estar guardadas en variables.

function exercise12() {
  let usuario = {
    nombre: "david",
    password: "123",
  };

  let intentos = 0;

  while (intentos < 3) {
    nombreIngresado = prompt("Ingrese el nombre de usuairo: ");
    passwordIngresado = prompt("Ingrese el password del usuairo: ");

    if (
      nombreIngresado != usuario.nombre ||
      passwordIngresado != usuario.password
    ) {
      intentos++;
      console.log("El nombre de usuarioo o contrasena son incorrectos");
      console.log(`Le quedan ${3 - intentos} intentos`);
    } else if (
      nombreIngresado === usuario.nombre &&
      passwordIngresado === usuario.password
    ) {
      console.log(`Bienvenido ${usuaior.nombre}`);
    }
  }
}

// exercise12();

// TODO: 13. Crear una funci√≥n que reciba dos par√°metros(number, length) y devuelva un array con los m√∫ltiplos para ese n√∫mero y la cantidad recibida por par√°metros. Ejemplo:
// - arrayMultiplos(2, 10) debe retornar [2, 4, 6, 8, 10, 12, 14, 16, 18, 20].
// - arrayMultiplos(17, 6) debe retornar [17, 34, 51, 68, 85, 102].
// 14. Escribe una funci√≥n llamada arrayContiene que reciba dos par√°metros: un array y un elemento. La funci√≥n debe comprobar si el elemento existe dentro del array. Devuelve "true" si est√°, o "false" si no est√°.
// 15. Escribe una funci√≥n llamada agregarNumeros que reciba un arreglo de enteros. La funci√≥n debe sumar todos los enteros y devolver el valor de la suma.
// 16. Escribe una funci√≥n llamada promedioResultado que reciba un arreglo de enteros representando resultados de tests. La funci√≥n debe iterar los elementos del array, calcular y devolver el promedio de puntajes.
// 17. Escribe una funci√≥n llamada numeroMasGrande que reciba un arreglo de enteros. La funci√≥n debe devolver el n√∫mero m√°s grande del arreglo.
// 18. Escribe una funci√≥n llamada cuentoElementos que reciba un arreglo de enteros. La funci√≥n debe retornar la cantidad de elementos del arreglo cuyo valor es mayor a 18.
// 19. Escribe una funci√≥n llamada todosIguales que reciba un arreglo de enteros. La funci√≥n debe indicar si todos los elementos del arreglo son iguales. Retornar true si todos son iguales, de lo contrario devuelve false.
// 20. Escribe una funci√≥n llamada mesesDelA√±o que reciba un arreglo que contiene algunos meses del a√±o desordenados. La funci√≥n debe recorrer el arreglo buscando los meses de "Enero", "Marzo" y "Noviembre", guardarlos en un nuevo arreglo y retornarlo. Si alguno de los meses no est√°, devolver: "No se encontraron los meses pedidos".
// 21. Escribe una funci√≥n llamada breakStatement que reciba un n√∫mero. La funci√≥n debe iterar en un bucle aumentando en 2 el n√∫mero recibido hasta un l√≠mite de 10 veces. Guardar cada nuevo valor en un array y devolver el array. Si en alg√∫n momento el valor de la suma y la cantidad de iteraciones coinciden, debe interrumpirse la ejecuci√≥n y devolver: "Se interrumpi√≥ la ejecuci√≥n"
// 22. Escribe una funci√≥n llamada continueStatement que reciba un n√∫mero. La funci√≥n debe iterar en un bucle aumentando en 2 el n√∫mero recibido hasta un l√≠mite de 10
// veces. Guardar cada nuevo valor en un array y devolver el array. Cuando el n√∫mero de iteraciones alcance el valor 5, no se debe sumar en ese caso y se debe continuar con la siguiente iteraci√≥n.
// 23. Filtrar y transformar n√∫meros. Crea una funci√≥n que reciba un array de n√∫meros. La funci√≥n debe retornar un nuevo array que contenga solo los n√∫meros pares multiplicados por 2. Usa continue para saltar los n√∫meros impares.
// 24. Encontrar el Primer Elemento Mayor Escribe una funci√≥n que reciba un array de n√∫meros y un n√∫mero l√≠mite. La funci√≥n debe retornar el primer n√∫mero en el array que sea mayor que el l√≠mite. Usa break para detener el bucle cuando encuentres el n√∫mero.
// 25. Sumar Elementos Excepto el Mayor Crea una funci√≥n que reciba un array de n√∫meros y retorne la suma de todos los elementos excepto el mayor. Usa continue para saltar el mayor n√∫mero.
// 26. Sumar hasta encontrar un n√∫mero Escribe una funci√≥n que reciba un array de n√∫meros y un n√∫mero objetivo. La funci√≥n debe retornar la suma de los n√∫meros hasta que la suma sea mayor o igual al n√∫mero objetivo. Usa break para detener el bucle cuando se alcance el objetivo.
// 27. Encontrar Nombres que Empiezan con Letra Crea una funci√≥n que reciba un array de nombres y una letra. La funci√≥n debe retornar un nuevo array con los nombres que comienzan con esa letra. Usa continue para saltar los nombres que no coincidan.
// 28. Sumar Elementos en un Intervalo Escribe una funci√≥n que reciba un array de n√∫meros, un valor m√≠nimo y un valor
// m√°ximo. La funci√≥n debe retornar la suma de los elementos que est√©n dentro del intervalo [m√≠nimo, m√°ximo] (inclusive). Usa continue para saltar los n√∫meros que no est√©n en el intervalo
// 29. Transformar Elementos Hasta un L√≠mite Crea una funci√≥n que reciba un array de n√∫meros y un l√≠mite. La funci√≥n debe retornar un nuevo array con los n√∫meros multiplicados por 2, hasta que el primer n√∫mero multiplicado por 2 sea mayor que el l√≠mite. Usa break para detener el bucle en ese punto.
// 30. Contar elementos con condici√≥n Escribe una funci√≥n que reciba un array de n√∫meros y un n√∫mero objetivo. La funci√≥n debe retornar la cantidad de elementos en el array que sean mayores que el objetivo. Usa continue para saltar los n√∫meros que no cumplan la condici√≥n.
// 31. Eliminar Elementos Impares Crea una funci√≥n que reciba un array de n√∫meros y elimine todos los elementos impares usando un loop y el m√©todo splice. Retorna el array modificado.
// 32. Agregar elementos duplicados Escribe una funci√≥n que reciba un array de n√∫meros y duplique cada elemento del array usando un loop y el m√©todo splice. Retorna el array modificado.
// 33. Filtrar N√∫meros Mayores a un Valor Crea una funci√≥n que reciba un array de n√∫meros y un valor. La funci√≥n debe retornar un nuevo array que contenga solo los n√∫meros mayores al valor dado. Usa un loop y el m√©todo push.
// 34. Remover Elementos Menores a un Valor Crea una funci√≥n que reciba un array de n√∫meros y un valor. La funci√≥n debe eliminar todos los elementos menores al valor dado usando un loop y el m√©todo splice. Retorna el array modificado.
// 35. Crear Nuevo Array con Subarray Crea una funci√≥n que reciba un array y dos √≠ndices. La funci√≥n debe retornar un nuevo array que contenga los elementos del array original desde el primer √≠ndice hasta el segundo √≠ndice (inclusive). Usa un loop y el m√©todo push.
// 36. Eliminar Duplicados Escribe una funci√≥n que reciba un array y elimine todos los elementos duplicados usando un loop y los m√©todos splice. Retorna el array modificado.
